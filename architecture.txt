The server can maintain itself until the match is won.  After, it can self destruct and make the players exit the battle.
The server also needs to be a docker image of its own, displayed on the host's machine.

I want the pokemon to be pretty accurate, but for the sake of time, I can pre create a handful of them with a set of four moves.
Each player is randomly assigned one at the start of the game.

02/05/24
The server needs more intelligent data structures to handle game state.  Game logic should live in the server.
Here are things that need to be known:
    Players in game (can come later)
    Pokemon battling in game and their stats

When does a game end?
    When one pokemon runs out of HP (HP < 0)

These structures should be exportable (JSON) to be received and parsed by the client

02/13/24
Predefined pokemon in pokemon.
NEXT STEP: Configure client to use the newly created endpoint that returns a list of pokemon.

NEXT STEPS:
    - Get game to work with pokemon connecting player added and fight against something random
    - Then! Work on allowing the host to be able to play (this may be when I need to containerize the server and run in detached)
    - clean up comments

I want to get a database of some sort going that has all of these pokemon and moves that I can feed into the game.
This would set me up to have a kubernetes cluster with a DB, client, and server

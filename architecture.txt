The server can maintain itself until the match is won.  After, it can self destruct and make the players exit the battle.
The server also needs to be a docker image of its own, displayed on the host's machine.

I want the pokemon to be pretty accurate, but for the sake of time, I can pre create a handful of them with a set of four moves.
Each player is randomly assigned one at the start of the game.

02/05/24
The server needs more intelligent data structures to handle game state.  Game logic should live in the server.
Here are things that need to be known:
    Players in game (can come later)
    Pokemon battling in game and their stats

When does a game end?
    When one pokemon runs out of HP (HP < 0)

These structures should be exportable (JSON) to be received and parsed by the client

02/13/24
Predefined pokemon in pokemon.
NEXT STEP: Configure client to use the newly created endpoint that returns a list of pokemon.

02/17/24
set up choosing pokemon in client based on what is available in the server and set up
the beginnning of ending the game.

02/20/24
I started working on containerizing the server, but I think the application architecture may get in the way of this.  "main", starts the client.  The
apps are coupled together

    SOLUTION
        Take a flag from OS that indicates the server should start.
    
    TODO
        Implement solution and set up "Host" to build the container and then connect to it.  This will use the current
        connection logic

NEXT STEP: work on containerizing the server in a detached way so that the host can join and play

I want to get a database of some sort going that has all of these pokemon and moves that I can feed into the game.
This would set me up to have a kubernetes cluster with a DB, client, and server
